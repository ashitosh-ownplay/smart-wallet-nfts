var w=Object.defineProperty;var C=(i,e,t)=>e in i?w(i,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):i[e]=t;var o=(i,e,t)=>(C(i,typeof e!="symbol"?e+"":e,t),t);import{dw as y,aT as T,aw as b,dT as E,aU as v,aO as d,bF as R,bH as u,ao as p,as as g,al as f,c5 as S}from"./index-XQkpot5-.js";import{a as A,b as B,C as O,G as F}from"./contract-appuri-8478c3fc.browser.esm-DivvSBf3.js";import{C as V}from"./contract-interceptor-d7b164a7.browser.esm-C_yNedqZ.js";import{C as H}from"./contract-platform-fee-a0d04a69.browser.esm-CkRqxBfa.js";import{C as M}from"./contract-roles-8b001c6a.browser.esm-Bs3xlrD-.js";import{C as P}from"./contract-sales-ec11128d.browser.esm-By0FbrWB.js";import{a as x}from"./erc-20-6dcda44e.browser.esm-BI1H9ADZ.js";import{S as D}from"./erc-20-standard-2f58dd55.browser.esm-XItOPMUI.js";import"./assertEnabled-4ecab1d8.browser.esm-DhIRNXyO.js";import"./drop-claim-conditions-935235da.browser.esm-Dtuobcr1.js";import"./index-BVsAF5pv.js";import"./treeify-BwYPAokz.js";import"./setErc20Allowance-a3d20a68.browser.esm-CWh42N8e.js";class I{constructor(e,t){this.contractWrapper=e,this.events=t}async getAllHolderBalances(){const t=(await this.events.getEvents("Transfer")).map(a=>a.data),r={};t.forEach(a=>{const n=a==null?void 0:a.from,c=a==null?void 0:a.to,m=a==null?void 0:a.value;n!==u&&(n in r||(r[n]=f.from(0)),r[n]=r[n].sub(m)),c!==u&&(c in r||(r[c]=f.from(0)),r[c]=r[c].add(m))});const s=Object.entries(r),l=await Promise.all(s.map(a=>{let[,n]=a;return S(this.contractWrapper.getProvider(),this.contractWrapper.address,n)}));return s.map((a,n)=>{let[c]=a;return{holder:c,balance:l[n]}})}}const h=class h extends D{constructor(t,r,s){let l=arguments.length>3&&arguments[3]!==void 0?arguments[3]:{},a=arguments.length>4?arguments[4]:void 0,n=arguments.length>5?arguments[5]:void 0,c=arguments.length>6&&arguments[6]!==void 0?arguments[6]:new T(t,r,a,l,s);super(c,s,n);o(this,"mint",p(async t=>this.erc20.mint.prepare(t)));o(this,"mintTo",p(async(t,r)=>this.erc20.mintTo.prepare(t,r)));o(this,"mintBatchTo",p(async t=>this.erc20.mintBatchTo.prepare(t)));o(this,"delegateTo",p(async t=>g.fromContractWrapper({contractWrapper:this.contractWrapper,method:"delegate",args:[await d(t)]})));o(this,"burn",p(t=>this.erc20.burn.prepare(t)));o(this,"burnFrom",p(async(t,r)=>this.erc20.burnFrom.prepare(t,r)));this.abi=b.parse(a||[]),this.metadata=new A(this.contractWrapper,E,this.storage),this.app=new B(this.contractWrapper,this.metadata,this.storage),this.roles=new M(this.contractWrapper,h.contractRoles),this.sales=new P(this.contractWrapper),this.events=new O(this.contractWrapper),this.history=new I(this.contractWrapper,this.events),this.encoder=new v(this.contractWrapper),this.estimator=new F(this.contractWrapper),this.platformFees=new H(this.contractWrapper),this.interceptor=new V(this.contractWrapper),this.signature=new x(this.contractWrapper,this.roles)}async getVoteBalance(){return await this.getVoteBalanceOf(await this.contractWrapper.getSignerAddress())}async getVoteBalanceOf(t){return await this.erc20.getValue(await this.contractWrapper.read("getVotes",[t]))}async getDelegation(){return await this.getDelegationOf(await this.contractWrapper.getSignerAddress())}async getDelegationOf(t){return await this.contractWrapper.read("delegates",[await d(t)])}async isTransferRestricted(){return!await this.contractWrapper.read("hasRole",[R("transfer"),u])}async getMintTransaction(t,r){return this.erc20.getMintTransaction(t,r)}async prepare(t,r,s){return g.fromContractWrapper({contractWrapper:this.contractWrapper,method:t,args:r,overrides:s})}async call(t,r,s){return this.contractWrapper.call(t,r,s)}};o(h,"contractRoles",y);let W=h;export{W as Token};
