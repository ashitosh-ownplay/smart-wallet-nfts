const __vite__fileDeps=["assets/index-D5r_MwnI.js","assets/index-B_SY1GJM.css"],__vite__mapDeps=i=>i.map(i=>__vite__fileDeps[i]);
import{cH as m,ak as i,bZ as g,_ as u,b7 as l}from"./index-D5r_MwnI.js";import{a as d,C as E}from"./setErc20Allowance-a3d20a68.browser.esm-_F_meokO.js";const h=m("0x80ac58cd"),R=m("0xd9b67a26"),_={name:"Failed to load NFT metadata"};async function C(t,a,e){if(a.startsWith("data:application/json;base64")&&typeof Buffer<"u"){const o=a.split(",")[1],s=JSON.parse(Buffer.from(o,"base64").toString("utf-8"));return d.parse({...s,id:i.from(t).toString(),uri:a})}const r=a.replace("{id}",g(i.from(t).toHexString(),32).slice(2));let n;try{n=await e.downloadJSON(r)}catch{const s=a.replace("{id}",i.from(t).toString());try{n=await e.downloadJSON(s)}catch{console.warn(`failed to get token metadata: ${JSON.stringify({tokenId:t.toString(),tokenUri:a})} -- falling back to default metadata`),n=_}}return d.parse({...n,id:i.from(t).toString(),uri:a})}async function O(t,a,e,r){let n;const o=(await u(()=>import("./IERC165-ODxXmlQV.js"),[])).default,s=new l(t,o,a),[p,w]=await Promise.all([s.supportsInterface(h),s.supportsInterface(R)]);if(p){const c=(await u(()=>import("./index-D5r_MwnI.js").then(f=>f.eP),__vite__mapDeps([0,1]))).default;n=await new l(t,c,a).tokenURI(e)}else if(w){const c=(await u(()=>import("./index-D5r_MwnI.js").then(f=>f.eR),__vite__mapDeps([0,1]))).default;n=await new l(t,c,a).uri(e)}else throw Error("Contract must implement ERC 1155 or ERC 721.");return n?C(e,n,r):d.parse({..._,id:i.from(e).toString(),uri:""})}async function F(t,a){return typeof t=="string"?t:await a.upload(E.parse(t))}async function S(t,a,e,r){if(y(t))return t;if(I(t))return await a.uploadBatch(t.map(o=>E.parse(o)),{rewriteFileNames:{fileStartNumber:e||0},onProgress:r==null?void 0:r.onProgress});throw new Error("NFT metadatas must all be of the same type (all URI or all NFTMetadataInput)")}function A(t){const a=t[0].substring(0,t[0].lastIndexOf("/"));for(let e=0;e<t.length;e++){const r=t[e].substring(0,t[e].lastIndexOf("/"));if(a!==r)throw new Error(`Can only create batches with the same base URI for every entry in the batch. Expected '${a}' but got '${r}'`)}return a.replace(/\/$/,"")+"/"}function y(t){return t.find(a=>typeof a!="string")===void 0}function I(t){return t.find(a=>typeof a!="object")===void 0}const x=100;export{x as D,_ as F,h as I,C as a,F as b,R as c,O as f,A as g,S as u};
