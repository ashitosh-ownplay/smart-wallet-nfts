import{g as w,a as l,n as f,b as D,s as P,u as v,p as b,c as j,v as A,d as H,i as L}from"./index-DFW4citV.js";import{n as g,g as U}from"./normalizeChainId-DwLndiI2.js";import{injectedProvider as I}from"./mipdStore-gJAX0jQL.js";function k(n){return!!I(n.id)}function T(n){const e=I(n);if(!e)throw new Error(`No injected provider found for wallet: "${n}"`);return e}async function z(n,e,o){const t=T(n),i=(await t.request({method:"eth_requestAccounts"}))[0];if(!i)throw new Error("no accounts available");const s=w(i),r=await t.request({method:"eth_chainId"}).then(g);let d=e.chain&&e.chain.id===r?e.chain:l(r);return e.chain&&e.chain.id!==r&&(await _(t,e.chain),d=e.chain),E(t,s,d,o)}async function F(n,e,o){const t=T(n),i=(await t.request({method:"eth_accounts"}))[0];if(!i)throw new Error("no accounts available");const s=w(i),r=await t.request({method:"eth_chainId"}).then(g),d=o&&o.id===r?o:l(r);return E(t,s,d,e)}async function E(n,e,o,t){const c={address:e,async sendTransaction(a){return{transactionHash:await n.request({method:"eth_sendTransaction",params:[{accessList:a.accessList,value:a.value?f(a.value):void 0,gas:a.gas?f(a.gas):void 0,from:this.address,to:a.to,data:a.data}]})}},async signMessage({message:a}){if(!c.address)throw new Error("Provider not setup");const h=typeof a=="string"?P(a):a.raw instanceof Uint8Array?v(a.raw):a.raw;return await n.request({method:"personal_sign",params:[h,c.address]})},async signTypedData(a){if(!n||!c.address)throw new Error("Provider not setup");const h=b(a),{domain:u,message:C,primaryType:y}=h,p={EIP712Domain:j({domain:u}),...h.types};A({domain:u,message:C,primaryType:y,types:p});const q=H({domain:u??{},message:C,primaryType:y,types:p},(W,m)=>L(m)?m.toLowerCase():m);return await n.request({method:"eth_signTypedData_v4",params:[c.address,q]})}};async function i(){n.removeListener("accountsChanged",r),n.removeListener("chainChanged",d),n.removeListener("disconnect",s)}function s(){i(),t.emit("disconnect",void 0)}function r(a){if(a[0]){const h={...c,address:w(a[0])};t.emit("accountChanged",h),t.emit("accountsChanged",a)}else s()}function d(a){const h=l(g(a));t.emit("chainChanged",h)}return n.on&&(n.on("accountsChanged",r),n.on("chainChanged",d),n.on("disconnect",s)),[c,o,i,a=>_(n,a)]}async function _(n,e){var t,c,i;const o=f(e.id);try{await n.request({method:"wallet_switchEthereumChain",params:[{chainId:o}]})}catch(s){if((s==null?void 0:s.code)===4902||((c=(t=s==null?void 0:s.data)==null?void 0:t.originalError)==null?void 0:c.code)===4902){const r=await D(e);await n.request({method:"wallet_addEthereumChain",params:[{chainId:o,chainName:r.name,nativeCurrency:r.nativeCurrency,rpcUrls:U(r),blockExplorerUrls:(i=r.explorers)==null?void 0:i.map(d=>d.url)}]})}else throw s}}export{F as autoConnectInjectedWallet,z as connectInjectedWallet,T as getInjectedProvider,k as isInjectedWallet};
